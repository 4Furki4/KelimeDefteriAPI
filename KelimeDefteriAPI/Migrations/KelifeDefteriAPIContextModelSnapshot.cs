// <auto-generated />
using System;
using KelimeDefteriAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KelimeDefteriAPI.Migrations
{
    [DbContext(typeof(KelifeDefteriAPIContext))]
    partial class KelifeDefteriAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Definition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Definitions");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Record", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Word", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RecordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Definition", b =>
                {
                    b.HasOne("KelimeDefteriAPI.Context.EntityConcretes.Word", null)
                        .WithMany("Definitions")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Word", b =>
                {
                    b.HasOne("KelimeDefteriAPI.Context.EntityConcretes.Record", null)
                        .WithMany("Words")
                        .HasForeignKey("RecordId");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Record", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("KelimeDefteriAPI.Context.EntityConcretes.Word", b =>
                {
                    b.Navigation("Definitions");
                });
#pragma warning restore 612, 618
        }
    }
}
